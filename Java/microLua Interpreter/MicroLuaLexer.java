/* The following code was generated by JFlex 1.4.3 on 4/9/11 7:09 PM */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/9/11 7:09 PM from the specification file
 * <tt>C:/Users/Adrian/Desktop/Symbol Table/MicroLua.jflex</tt>
 */
class MicroLuaLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\6\25\0\1\4\1\0\1\45\5\0\1\34\1\35"+
    "\1\43\1\42\1\31\1\5\1\32\1\44\12\3\1\0\1\33\1\37"+
    "\1\36\1\40\2\0\13\1\1\22\16\1\4\0\1\2\1\0\1\23"+
    "\1\1\1\17\1\7\1\11\1\15\1\1\1\27\1\21\2\1\1\12"+
    "\1\1\1\14\1\10\1\24\1\26\1\25\1\13\1\20\1\16\1\1"+
    "\1\30\3\1\3\0\1\41\53\0\1\1\12\0\1\1\4\0\1\1"+
    "\5\0\27\1\1\0\37\1\1\0\u013f\1\31\0\162\1\4\0\14\1"+
    "\16\0\5\1\11\0\1\1\213\0\1\1\13\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\24\1\1\0\54\1\1\0\46\1\1\0\5\1"+
    "\4\0\202\1\10\0\105\1\1\0\46\1\2\0\2\1\6\0\20\1"+
    "\41\0\46\1\2\0\1\1\7\0\47\1\110\0\33\1\5\0\3\1"+
    "\56\0\32\1\5\0\13\1\25\0\12\3\4\0\2\1\1\0\143\1"+
    "\1\0\1\1\17\0\2\1\7\0\2\1\12\3\3\1\2\0\1\1"+
    "\20\0\1\1\1\0\36\1\35\0\3\1\60\0\46\1\13\0\1\1"+
    "\u0152\0\66\1\3\0\1\1\22\0\1\1\7\0\12\1\4\0\12\3"+
    "\25\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1"+
    "\3\0\4\1\3\0\1\1\36\0\2\1\1\0\3\1\4\0\12\3"+
    "\2\1\23\0\6\1\4\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\37\0\4\1\1\0\1\1\7\0"+
    "\12\3\2\0\3\1\20\0\11\1\1\0\3\1\1\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\3\0\1\1\22\0\1\1\17\0"+
    "\2\1\4\0\12\3\25\0\10\1\2\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\3\0\1\1\36\0\2\1\1\0"+
    "\3\1\4\0\12\3\1\0\1\1\21\0\1\1\1\0\6\1\3\0"+
    "\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0"+
    "\2\1\3\0\3\1\3\0\10\1\1\0\3\1\55\0\11\3\25\0"+
    "\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1\46\0"+
    "\2\1\4\0\12\3\25\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\12\1\1\0\5\1\3\0\1\1\40\0\1\1\1\0\2\1\4\0"+
    "\12\3\25\0\10\1\1\0\3\1\1\0\27\1\1\0\20\1\46\0"+
    "\2\1\4\0\12\3\25\0\22\1\3\0\30\1\1\0\11\1\1\0"+
    "\1\1\2\0\7\1\72\0\60\1\1\0\2\1\14\0\7\1\11\0"+
    "\12\3\47\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0"+
    "\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\2\0\2\1\1\0\4\1\1\0\2\1\11\0\1\1\2\0"+
    "\5\1\1\0\1\1\11\0\12\3\2\0\2\1\42\0\1\1\37\0"+
    "\12\3\26\0\10\1\1\0\42\1\35\0\4\1\164\0\42\1\1\0"+
    "\5\1\1\0\2\1\25\0\12\3\6\0\6\1\112\0\46\1\12\0"+
    "\51\1\7\0\132\1\5\0\104\1\5\0\122\1\6\0\7\1\1\0"+
    "\77\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0"+
    "\4\1\2\0\47\1\1\0\1\1\1\0\4\1\2\0\37\1\1\0"+
    "\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0"+
    "\7\1\1\0\7\1\1\0\27\1\1\0\37\1\1\0\1\1\1\0"+
    "\4\1\2\0\7\1\1\0\47\1\1\0\23\1\16\0\11\3\56\0"+
    "\125\1\14\0\u026c\1\2\0\10\1\12\0\32\1\5\0\113\1\25\0"+
    "\15\1\1\0\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0"+
    "\3\1\17\0\64\1\43\0\1\1\4\0\1\1\3\0\12\3\46\0"+
    "\12\3\6\0\130\1\10\0\51\1\127\0\35\1\51\0\12\3\36\1"+
    "\2\0\5\1\u038b\0\154\1\224\0\234\1\4\0\132\1\6\0\26\1"+
    "\2\0\6\1\2\0\46\1\2\0\6\1\2\0\10\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\37\1\2\0\65\1\1\0\7\1"+
    "\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1"+
    "\4\0\15\1\5\0\3\1\1\0\7\1\164\0\1\1\15\0\1\1"+
    "\202\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1"+
    "\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\3\1"+
    "\1\0\7\1\3\0\3\1\5\0\5\1\u0ebb\0\2\1\52\0\5\1"+
    "\5\0\2\1\4\0\126\1\6\0\3\1\1\0\132\1\1\0\4\1"+
    "\5\0\50\1\4\0\136\1\21\0\30\1\70\0\20\1\u0200\0\u19b6\1"+
    "\112\0\u51a6\1\132\0\u048d\1\u0773\0\u2ba4\1\u215c\0\u012e\1\2\0\73\1"+
    "\225\0\7\1\14\0\5\1\5\0\1\1\1\0\12\1\1\0\15\1"+
    "\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0\154\1"+
    "\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0\14\1\164\0\5\1"+
    "\1\0\207\1\23\0\12\3\7\0\32\1\6\0\32\1\13\0\131\1"+
    "\3\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\17\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\1"+
    "\1\16\1\17\1\20\1\1\1\0\1\4\1\21\1\22"+
    "\11\2\1\23\6\2\1\24\1\25\1\15\1\26\1\0"+
    "\1\2\1\27\1\2\1\30\1\31\5\2\1\32\5\2"+
    "\1\0\1\33\2\2\1\34\1\35\1\36\1\37\3\2"+
    "\1\40\1\2\1\0\1\41\1\2\1\42\2\2\1\43"+
    "\1\0\1\2\1\44\1\2\1\45\1\2\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\46\0\230\0\276\0\344"+
    "\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214"+
    "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\46\0\46\0\46"+
    "\0\46\0\46\0\u02f8\0\u031e\0\u0344\0\u036a\0\46\0\46"+
    "\0\46\0\u0390\0\u03b6\0\u03dc\0\114\0\114\0\u0402\0\u0428"+
    "\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\114"+
    "\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\46\0\46"+
    "\0\46\0\46\0\u063c\0\u0662\0\114\0\u0688\0\114\0\114"+
    "\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\114\0\u076c\0\u0792"+
    "\0\u07b8\0\u07de\0\u0804\0\u082a\0\114\0\u0850\0\u0876\0\114"+
    "\0\114\0\114\0\114\0\u089c\0\u08c2\0\u08e8\0\114\0\u090e"+
    "\0\u0934\0\114\0\u095a\0\114\0\u0980\0\u09a6\0\114\0\u09cc"+
    "\0\u09f2\0\114\0\u0a18\0\46\0\u0a3e\0\114\0\114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\5\1\7"+
    "\1\10\1\11\1\12\1\3\1\13\1\14\1\3\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\3\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\47\0\1\3"+
    "\1\43\1\3\3\0\22\3\20\0\1\4\47\0\1\44"+
    "\41\0\1\3\1\43\1\3\3\0\1\3\1\45\20\3"+
    "\16\0\1\3\1\43\1\3\3\0\16\3\1\46\3\3"+
    "\16\0\1\3\1\43\1\3\3\0\3\3\1\47\1\3"+
    "\1\50\14\3\16\0\1\3\1\43\1\3\3\0\1\3"+
    "\1\51\20\3\16\0\1\3\1\43\1\3\3\0\1\3"+
    "\1\52\10\3\1\53\7\3\16\0\1\3\1\43\1\3"+
    "\3\0\7\3\1\54\12\3\16\0\1\3\1\43\1\3"+
    "\3\0\1\3\1\55\20\3\16\0\1\3\1\43\1\3"+
    "\3\0\14\3\1\56\3\3\1\57\1\3\16\0\1\3"+
    "\1\43\1\3\3\0\6\3\1\60\13\3\16\0\1\3"+
    "\1\43\1\3\3\0\12\3\1\61\7\3\16\0\1\3"+
    "\1\43\1\3\3\0\5\3\1\62\14\3\16\0\1\3"+
    "\1\43\1\3\3\0\16\3\1\63\3\3\16\0\1\3"+
    "\1\43\1\3\3\0\2\3\1\64\17\3\16\0\1\3"+
    "\1\43\1\3\3\0\2\3\1\65\17\3\16\0\1\3"+
    "\1\43\1\3\3\0\20\3\1\66\1\3\53\0\1\67"+
    "\45\0\1\70\45\0\1\71\45\0\1\72\31\0\1\73"+
    "\24\0\1\3\1\0\1\3\3\0\22\3\15\0\6\44"+
    "\1\0\37\44\1\0\1\3\1\43\1\3\3\0\4\3"+
    "\1\74\15\3\16\0\1\3\1\43\1\3\3\0\1\75"+
    "\21\3\16\0\1\3\1\43\1\3\3\0\10\3\1\76"+
    "\11\3\16\0\1\3\1\43\1\3\3\0\11\3\1\77"+
    "\10\3\16\0\1\3\1\43\1\3\3\0\3\3\1\100"+
    "\16\3\16\0\1\3\1\43\1\3\3\0\5\3\1\101"+
    "\14\3\16\0\1\3\1\43\1\3\3\0\5\3\1\102"+
    "\14\3\16\0\1\3\1\43\1\3\3\0\12\3\1\103"+
    "\7\3\16\0\1\3\1\43\1\3\3\0\2\3\1\104"+
    "\17\3\16\0\1\3\1\43\1\3\3\0\4\3\1\105"+
    "\15\3\16\0\1\3\1\43\1\3\3\0\1\106\21\3"+
    "\16\0\1\3\1\43\1\3\3\0\12\3\1\107\7\3"+
    "\16\0\1\3\1\43\1\3\3\0\11\3\1\110\5\3"+
    "\1\111\2\3\16\0\1\3\1\43\1\3\3\0\14\3"+
    "\1\112\5\3\16\0\1\3\1\43\1\3\3\0\12\3"+
    "\1\113\7\3\36\0\1\114\25\0\1\3\1\43\1\3"+
    "\3\0\2\3\1\115\17\3\16\0\1\3\1\43\1\3"+
    "\3\0\14\3\1\116\5\3\16\0\1\3\1\43\1\3"+
    "\3\0\10\3\1\117\11\3\16\0\1\3\1\43\1\3"+
    "\3\0\4\3\1\120\15\3\16\0\1\3\1\43\1\3"+
    "\3\0\3\3\1\121\16\3\16\0\1\3\1\43\1\3"+
    "\3\0\5\3\1\122\14\3\16\0\1\3\1\43\1\3"+
    "\3\0\11\3\1\123\10\3\16\0\1\3\1\43\1\3"+
    "\3\0\5\3\1\124\14\3\16\0\1\3\1\43\1\3"+
    "\3\0\7\3\1\125\12\3\16\0\1\3\1\43\1\3"+
    "\3\0\7\3\1\126\12\3\16\0\1\3\1\43\1\3"+
    "\3\0\1\127\21\3\16\0\1\3\1\43\1\3\3\0"+
    "\3\3\1\130\16\3\30\0\1\131\33\0\1\3\1\43"+
    "\1\3\3\0\3\3\1\132\16\3\16\0\1\3\1\43"+
    "\1\3\3\0\11\3\1\133\10\3\16\0\1\3\1\43"+
    "\1\3\3\0\11\3\1\134\10\3\16\0\1\3\1\43"+
    "\1\3\3\0\16\3\1\135\3\3\16\0\1\3\1\43"+
    "\1\3\3\0\12\3\1\136\7\3\16\0\1\3\1\43"+
    "\1\3\3\0\2\3\1\137\17\3\35\0\1\140\26\0"+
    "\1\3\1\43\1\3\3\0\12\3\1\141\7\3\16\0"+
    "\1\3\1\43\1\3\3\0\5\3\1\142\14\3\16\0"+
    "\1\3\1\43\1\3\3\0\16\3\1\143\3\3\62\0"+
    "\1\144\1\0\1\3\1\43\1\3\3\0\1\3\1\145"+
    "\20\3\16\0\1\3\1\43\1\3\3\0\2\3\1\146"+
    "\17\3\16\0\1\3\1\43\1\3\3\0\5\3\1\147"+
    "\14\3\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\20\1\5\11\4\1\3\11"+
    "\1\1\1\0\23\1\4\11\1\0\20\1\1\0\14\1"+
    "\1\0\6\1\1\0\3\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private void echo () { System . out . print (yytext ()); }

  public int position () { return yycolumn; }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MicroLuaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MicroLuaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1278) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { echo (); return new Token (TokenClass . RELOP, ">");
          }
        case 40: break;
        case 7: 
          { echo (); return new Token (TokenClass . DOT);
          }
        case 41: break;
        case 11: 
          { echo (); return new Token (TokenClass . ASSIGN);
          }
        case 42: break;
        case 36: 
          { echo (); return new Token (TokenClass . RETURN);
          }
        case 43: break;
        case 33: 
          { echo (); return new Token (TokenClass . LOCAL);
          }
        case 44: break;
        case 12: 
          { echo (); return new Token (TokenClass . RELOP, "<");
          }
        case 45: break;
        case 23: 
          { echo (); return new Token (TokenClass . END);
          }
        case 46: break;
        case 20: 
          { echo (); return new Token (TokenClass . RELOP, "==");
          }
        case 47: break;
        case 9: 
          { echo (); return new Token (TokenClass . LEFTPAREN);
          }
        case 48: break;
        case 35: 
          { echo (); return new Token (TokenClass . WHILE);
          }
        case 49: break;
        case 5: 
          { echo (); return new Token (TokenClass . MINUS, "-");
          }
        case 50: break;
        case 24: 
          { echo (); return new Token (TokenClass . NOT);
          }
        case 51: break;
        case 26: 
          { echo (); return new Token (TokenClass . AND);
          }
        case 52: break;
        case 27: 
          { echo (); return new Token (TokenClass . ELSE);
          }
        case 53: break;
        case 39: 
          { echo (); return new Token (TokenClass . FUNCTION);
          }
        case 54: break;
        case 2: 
          { echo (); return new Token (TokenClass . ID, yytext ());
          }
        case 55: break;
        case 30: 
          { echo (); return new Token (TokenClass . THEN);
          }
        case 56: break;
        case 15: 
          { echo (); return new Token (TokenClass . MULTOP, "*");
          }
        case 57: break;
        case 1: 
          { echo (); ErrorMessage . print (yychar, "Illegal character");
          }
        case 58: break;
        case 8: 
          { echo (); return new Token (TokenClass . SEMICOLON);
          }
        case 59: break;
        case 16: 
          { echo (); return new Token (TokenClass . MULTOP, "/");
          }
        case 60: break;
        case 22: 
          { echo (); return new Token (TokenClass . RELOP, "~=");
          }
        case 61: break;
        case 34: 
          { echo (); return new Token (TokenClass . PRINT);
          }
        case 62: break;
        case 21: 
          { echo (); return new Token (TokenClass . RELOP, "<=");
          }
        case 63: break;
        case 17: 
          { echo (); return new Token (TokenClass . DO);
          }
        case 64: break;
        case 6: 
          { echo (); return new Token (TokenClass . COMMA);
          }
        case 65: break;
        case 19: 
          { echo (); return new Token (TokenClass . IF);
          }
        case 66: break;
        case 3: 
          { echo (); return new Token (TokenClass . INTEGER, yytext ());
          }
        case 67: break;
        case 18: 
          { echo (); return new Token (TokenClass . OR);
          }
        case 68: break;
        case 37: 
          { echo (); return new Token (TokenClass . LISTSTRING, "\"List\"");
          }
        case 69: break;
        case 25: 
          { echo (); return new Token (TokenClass . NIL);
          }
        case 70: break;
        case 28: 
          { echo (); return new Token (TokenClass . CONS);
          }
        case 71: break;
        case 10: 
          { echo (); return new Token (TokenClass . RIGHTPAREN);
          }
        case 72: break;
        case 14: 
          { echo (); return new Token (TokenClass . PLUS,  "+");
          }
        case 73: break;
        case 32: 
          { echo (); return new Token (TokenClass . LISTOP, "head");
          }
        case 74: break;
        case 4: 
          { echo ();
          }
        case 75: break;
        case 38: 
          { echo (); return new Token (TokenClass . REQUIRE);
          }
        case 76: break;
        case 31: 
          { echo (); return new Token (TokenClass . LIST);
          }
        case 77: break;
        case 29: 
          { echo (); return new Token (TokenClass . LISTOP, "tail");
          }
        case 78: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   { return new Token (TokenClass . EOF); }
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
